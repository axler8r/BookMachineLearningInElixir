# Machine Learning in Elixir â€” Chapter 1

```elixir
Mix.install(
  [ {:axon, "~> 0.6"},
    {:nx, "~> 0.7"},
    # {:torchx, "~> 0.7"},
    {:exla, "~> 0.7"},
    {:explorer, "~> 0.9"},
    {:kino, "~> 0.13"}
  ]
)

# Nx.global_default_backend(Torchx.Backend)
# Nx.Defn.global_default_options(compiler: EXLA)
Nx.global_default_backend(EXLA.Backend)

```

## Example of an Axon Workflow

Make sure you can access the appropriate modules.

```elixir
require Explorer.DataFrame, as: DF

```


```

Set the global backend to use CUDA

```elixir
Nx.global_default_backend(Torchx.Backend)

```

<!-- livebook:{"output":true} -->

```
{Nx.BinaryBackend, []}
```

Get data

```elixir
iris = Explorer.Datasets.iris()

```

<!-- livebook:{"output":true} -->


Standardise and shuffle data

```elixir
columns = ~W/sepal_width sepal_length petal_length petal_width/
shuffled_standardised_irises =
  iris
  |> DF.mutate(
    for column <- across(^columns) do
      {column.name, (column - mean(column))/variance(column)}
    end
  )
  |> DF.mutate(species: Explorer.Series.cast(species, :category))
  |> DF.shuffle()

```

Make training and testing sets

```elixir
train_irises = DF.slice(shuffled_standardised_irises, 0..119)
test_irises = DF.slice(shuffled_standardised_irises, 120..149)

```

Extract $\hat{y}_{train}$ and $\hat{y}_{test}$

```elixir
features = ~W/sepal_width sepal_length petal_length petal_width/
x_train = Nx.stack(train_irises[features], axis: -1)
y_train =
  train_irises["species"]
  |> Nx.stack(axis: -1)
  |> Nx.equal(Nx.iota({1, 3}, axis: -1))
x_test = Nx.stack(test_irises[features], axis: -1)
y_test =
  test_irises["species"]
  |> Nx.stack(axis: -1)
  |> Nx.equal(Nx.iota({1, 3}, axis: -1))

```

Create a model

```elixir
model =
  Axon.input("iris_features", shape: {nil, 4})
  |> Axon.dense(3, activation: :softmax)


```

Display the model

```elixir
model |> Axon.Display.as_graph(Nx.template({1, 4}, :f32))

```

Prepare a data stream

```elixir
data_stream = Stream.repeatedly(fn -> {x_train, y_train} end)

```

Train the model

```elixir
trained_model =
  model
  |> Axon.Loop.trainer(:categorical_cross_entropy, :sgd)
  |> Axon.Loop.metric(:accuracy)
  |> Axon.Loop.run(data_stream, %{}, iterations: 500, epochs: 10)

:ok

```

Evaluate the model

```elixir
data = [{x_test, y_test}]
model
|> Axon.Loop.evaluator()
|> Axon.Loop.metric(:accuracy)
|> Axon.Loop.run(data, trained_model)

```
